/* ==================================== JUCER_BINARY_RESOURCE ====================================

   This is an auto-generated file: Any edits you make may be overwritten!

*/

namespace BinaryData
{

//================== kissfft.hh ==================
static const unsigned char temp_df736f16[] =
"#ifndef KISSFFT_CLASS_HH\n"
"#include <complex>\n"
"#include <vector>\n"
"\n"
"namespace kissfft_utils {\n"
"\n"
"template <typename T_scalar>\n"
"struct traits\n"
"{\n"
"    typedef T_scalar scalar_type;\n"
"    typedef std::complex<scalar_type> cpx_type;\n"
"    void fill_twiddles( std::complex<T_scalar> * dst ,int nfft,bool inverse)\n"
"    {\n"
"        T_scalar phinc =  (inverse?2:-2)* acos( (T_scalar) -1)  / nfft;\n"
"        for (int i=0;i<nfft;++i)\n"
"            dst[i] = exp( std::complex<T_scalar>(0,i*phinc) );\n"
"    }\n"
"\n"
"    void prepare(\n"
"            std::vector< std::complex<T_scalar> > & dst,\n"
"            int nfft,bool inverse, \n"
"            std::vector<int> & stageRadix, \n"
"            std::vector<int> & stageRemainder )\n"
"    {\n"
"        _twiddles.resize(nfft);\n"
"        fill_twiddles( &_twiddles[0],nfft,inverse);\n"
"        dst = _twiddles;\n"
"\n"
"        //factorize\n"
"        //start factoring out 4's, then 2's, then 3,5,7,9,...\n"
"        int n= nfft;\n"
"        int p=4;\n"
"        do {\n"
"            while (n % p) {\n"
"                switch (p) {\n"
"                    case 4: p = 2; break;\n"
"                    case 2: p = 3; break;\n"
"                    default: p += 2; break;\n"
"                }\n"
"                if (p*p>n)\n"
"                    p=n;// no more factors\n"
"            }\n"
"            n /= p;\n"
"            stageRadix.push_back(p);\n"
"            stageRemainder.push_back(n);\n"
"        }while(n>1);\n"
"    }\n"
"    std::vector<cpx_type> _twiddles;\n"
"\n"
"\n"
"    const cpx_type twiddle(int i) { return _twiddles[i]; }\n"
"};\n"
"\n"
"}\n"
"\n"
"template <typename T_Scalar,\n"
"         typename T_traits=kissfft_utils::traits<T_Scalar> \n"
"         >\n"
"class kissfft\n"
"{\n"
"    public:\n"
"        typedef T_traits traits_type;\n"
"        typedef typename traits_type::scalar_type scalar_type;\n"
"        typedef typename traits_type::cpx_type cpx_type;\n"
"\n"
"        kissfft(int nfft,bool inverse,const traits_type & traits=traits_type() ) \n"
"            :_nfft(nfft),_inverse(inverse),_traits(traits)\n"
"        {\n"
"            _traits.prepare(_twiddles, _nfft,_inverse ,_stageRadix, _stageRemainder);\n"
"        }\n"
"\n"
"        void transform(const cpx_type * src , cpx_type * dst)\n"
"        {\n"
"            kf_work(0, dst, src, 1,1);\n"
"        }\n"
"\n"
"    private:\n"
"        void kf_work( int stage,cpx_type * Fout, const cpx_type * f, size_t fstride,size_t in_stride)\n"
"        {\n"
"            int p = _stageRadix[stage];\n"
"            int m = _stageRemainder[stage];\n"
"            cpx_type * Fout_beg = Fout;\n"
"            cpx_type * Fout_end = Fout + p*m;\n"
"\n"
"            if (m==1) {\n"
"                do{\n"
"                    *Fout = *f;\n"
"                    f += fstride*in_stride;\n"
"                }while(++Fout != Fout_end );\n"
"            }else{\n"
"                do{\n"
"                    // recursive call:\n"
"                    // DFT of size m*p performed by doing\n"
"                    // p instances of smaller DFTs of size m, \n"
"                    // each one takes a decimated version of the input\n"
"                    kf_work(stage+1, Fout , f, fstride*p,in_stride);\n"
"                    f += fstride*in_stride;\n"
"                }while( (Fout += m) != Fout_end );\n"
"            }\n"
"\n"
"            Fout=Fout_beg;\n"
"\n"
"            // recombine the p smaller DFTs \n"
"            switch (p) {\n"
"                case 2: kf_bfly2(Fout,fstride,m); break;\n"
"                case 3: kf_bfly3(Fout,fstride,m); break;\n"
"                case 4: kf_bfly4(Fout,fstride,m); break;\n"
"                case 5: kf_bfly5(Fout,fstride,m); break;\n"
"                default: kf_bfly_generic(Fout,fstride,m,p); break;\n"
"            }\n"
"        }\n"
"\n"
"        // these were #define macros in the original kiss_fft\n"
"        void C_ADD( cpx_type & c,const cpx_type & a,const cpx_type & b) { c=a+b;}\n"
"        void C_MUL( cpx_type & c,const cpx_type & a,const cpx_type & b) { c=a*b;}\n"
"        void C_SUB( cpx_type & c,const cpx_type & a,const cpx_type & b) { c=a-b;}\n"
"        void C_ADDTO( cpx_type & c,const cpx_type & a) { c+=a;}\n"
"        void C_FIXDIV( cpx_type & ,int ) {} // NO-OP for float types\n"
"        scalar_type S_MUL( const scalar_type & a,const scalar_type & b) { return a*b;}\n"
"        scalar_type HALF_OF( const scalar_type & a) { return a*.5;}\n"
"        void C_MULBYSCALAR(cpx_type & c,const scalar_type & a) {c*=a;}\n"
"\n"
"        void kf_bfly2( cpx_type * Fout, const size_t fstride, int m)\n"
"        {\n"
"            for (int k=0;k<m;++k) {\n"
"                cpx_type t = Fout[m+k] * _traits.twiddle(k*fstride);\n"
"                Fout[m+k] = Fout[k] - t;\n"
"                Fout[k] += t;\n"
"            }\n"
"        }\n"
"\n"
"        void kf_bfly4( cpx_type * Fout, const size_t fstride, const size_t m)\n"
"        {\n"
"            cpx_type scratch[7];\n"
"            int negative_if_inverse = _inverse * -2 +1;\n"
"            for (size_t k=0;k<m;++k) {\n"
"                scratch[0] = Fout[k+m] * _traits.twiddle(k*fstride);\n"
"                scratch[1] = Fout[k+2*m] * _traits.twiddle(k*fstride*2);\n"
"                scratch[2] = Fout[k+3*m] * _traits.twiddle(k*fstride*3);\n"
"                scratch[5] = Fout[k] - scratch[1];\n"
"\n"
"                Fout[k] += scratch[1];\n"
"                scratch[3] = scratch[0] + scratch[2];\n"
"                scratch[4] = scratch[0] - scratch[2];\n"
"                scratch[4] = cpx_type( scratch[4].imag()*negative_if_inverse , -scratch[4].real()* negative_if_inverse );\n"
"\n"
"                Fout[k+2*m]  = Fout[k] - scratch[3];\n"
"                Fout[k] += scratch[3];\n"
"                Fout[k+m] = scratch[5] + scratch[4];\n"
"                Fout[k+3*m] = scratch[5] - scratch[4];\n"
"            }\n"
"        }\n"
"\n"
"        void kf_bfly3( cpx_type * Fout, const size_t fstride, const size_t m)\n"
"        {\n"
"            size_t k=m;\n"
"            const size_t m2 = 2*m;\n"
"            cpx_type *tw1,*tw2;\n"
"            cpx_type scratch[5];\n"
"            cpx_type epi3;\n"
"            epi3 = _twiddles[fstride*m];\n"
"\n"
"            tw1=tw2=&_twiddles[0];\n"
"\n"
"            do{\n"
"                C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);\n"
"\n"
"                C_MUL(scratch[1],Fout[m] , *tw1);\n"
"                C_MUL(scratch[2],Fout[m2] , *tw2);\n"
"\n"
"                C_ADD(scratch[3],scratch[1],scratch[2]);\n"
"                C_SUB(scratch[0],scratch[1],scratch[2]);\n"
"                tw1 += fstride;\n"
"                tw2 += fstride*2;\n"
"\n"
"                Fout[m] = cpx_type( Fout->real() - HALF_OF(scratch[3].real() ) , Fout->imag() - HALF_OF(scratch[3].imag() ) );\n"
"\n"
"                C_MULBYSCALAR( scratch[0] , epi3.imag() );\n"
"\n"
"                C_ADDTO(*Fout,scratch[3]);\n"
"\n"
"                Fout[m2] = cpx_type(  Fout[m].real() + scratch[0].imag() , Fout[m].imag() - scratch[0].real() );\n"
"\n"
"                C_ADDTO( Fout[m] , cpx_type( -scratch[0].imag(),scratch[0].real() ) );\n"
"                ++Fout;\n"
"            }while(--k);\n"
"        }\n"
"\n"
"        void kf_bfly5( cpx_type * Fout, const size_t fstride, const size_t m)\n"
"        {\n"
"            cpx_type *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;\n"
"            size_t u;\n"
"            cpx_type scratch[13];\n"
"            cpx_type * twiddles = &_twiddles[0];\n"
"            cpx_type *tw;\n"
"            cpx_type ya,yb;\n"
"            ya = twiddles[fstride*m];\n"
"            yb = twiddles[fstride*2*m];\n"
"\n"
"            Fout0=Fout;\n"
"            Fout1=Fout0+m;\n"
"            Fout2=Fout0+2*m;\n"
"            Fout3=Fout0+3*m;\n"
"            Fout4=Fout0+4*m;\n"
"\n"
"            tw=twiddles;\n"
"            for ( u=0; u<m; ++u ) {\n"
"                C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);\n"
"                scratch[0] = *Fout0;\n"
"\n"
"                C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);\n"
"                C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);\n"
"                C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);\n"
"                C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);\n"
"\n"
"                C_ADD( scratch[7],scratch[1],scratch[4]);\n"
"                C_SUB( scratch[10],scratch[1],scratch[4]);\n"
"                C_ADD( scratch[8],scratch[2],scratch[3]);\n"
"                C_SUB( scratch[9],scratch[2],scratch[3]);\n"
"\n"
"                C_ADDTO( *Fout0, scratch[7]);\n"
"                C_ADDTO( *Fout0, scratch[8]);\n"
"\n"
"                scratch[5] = scratch[0] + cpx_type(\n"
"                        S_MUL(scratch[7].real(),ya.real() ) + S_MUL(scratch[8].real() ,yb.real() ),\n"
"                        S_MUL(scratch[7].imag(),ya.real()) + S_MUL(scratch[8].imag(),yb.real())\n"
"                        );\n"
"\n"
"                scratch[6] =  cpx_type( \n"
"                        S_MUL(scratch[10].imag(),ya.imag()) + S_MUL(scratch[9].imag(),yb.imag()),\n"
"                        -S_MUL(scratch[10].real(),ya.imag()) - S_MUL(scratch[9].real(),yb.imag()) \n"
"                        );\n"
"\n"
"                C_SUB(*Fout1,scratch[5],scratch[6]);\n"
"                C_ADD(*Fout4,scratch[5],scratch[6]);\n"
"\n"
"                scratch[11] = scratch[0] + \n"
"                    cpx_type(\n"
"                            S_MUL(scratch[7].real(),yb.real()) + S_MUL(scratch[8].real(),ya.real()),\n"
"                            S_MUL(scratch[7].imag(),yb.real()) + S_MUL(scratch[8].imag(),ya.real())\n"
"                            );\n"
"\n"
"                scratch[12] = cpx_type(\n"
"                        -S_MUL(scratch[10].imag(),yb.imag()) + S_MUL(scratch[9].imag(),ya.imag()),\n"
"                        S_MUL(scratch[10].real(),yb.imag()) - S_MUL(scratch[9].real(),ya.imag())\n"
"                        );\n"
"\n"
"                C_ADD(*Fout2,scratch[11],scratch[12]);\n"
"                C_SUB(*Fout3,scratch[11],scratch[12]);\n"
"\n"
"                ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;\n"
"            }\n"
"        }\n"
"\n"
"        /* perform the butterfly for one stage of a mixed radix FFT */\n"
"        void kf_bfly_generic(\n"
"                cpx_type * Fout,\n"
"                const size_t fstride,\n"
"                int m,\n"
"                int p\n"
"                )\n"
"        {\n"
"            int u,k,q1,q;\n"
"            cpx_type * twiddles = &_twiddles[0];\n"
"            cpx_type t;\n"
"            int Norig = _nfft;\n"
"            cpx_type scratchbuf[p];\n"
"\n"
"            for ( u=0; u<m; ++u ) {\n"
"                k=u;\n"
"                for ( q1=0 ; q1<p ; ++q1 ) {\n"
"                    scratchbuf[q1] = Fout[ k  ];\n"
"                    C_FIXDIV(scratchbuf[q1],p);\n"
"                    k += m;\n"
"                }\n"
"\n"
"                k=u;\n"
"                for ( q1=0 ; q1<p ; ++q1 ) {\n"
"                    int twidx=0;\n"
"                    Fout[ k ] = scratchbuf[0];\n"
"                    for (q=1;q<p;++q ) {\n"
"                        twidx += fstride * k;\n"
"                        if (twidx>=Norig) twidx-=Norig;\n"
"                        C_MUL(t,scratchbuf[q] , twiddles[twidx] );\n"
"                        C_ADDTO( Fout[ k ] ,t);\n"
"                    }\n"
"                    k += m;\n"
"                }\n"
"            }\n"
"        }\n"
"\n"
"        int _nfft;\n"
"        bool _inverse;\n"
"        std::vector<cpx_type> _twiddles;\n"
"        std::vector<int> _stageRadix;\n"
"        std::vector<int> _stageRemainder;\n"
"        traits_type _traits;\n"
"};\n"
"#endif\n";

const char* kissfft_hh = (const char*) temp_df736f16;


const char* getNamedResource (const char*, int&) throw();
const char* getNamedResource (const char* resourceNameUTF8, int& numBytes) throw()
{
    unsigned int hash = 0;
    if (resourceNameUTF8 != 0)
        while (*resourceNameUTF8 != 0)
            hash = 31 * hash + (unsigned int) *resourceNameUTF8++;

    switch (hash)
    {
        case 0x0c396f29:  numBytes = 10621; return kissfft_hh;
        default: break;
    }

    numBytes = 0;
    return 0;
}

}

Overview of GP:
	GP provides a method to search for a fittest individual computer program
	Typically the program will be evaluated over a number of different fitness cases so that its fitness is measured as a sum or an average over a variety of different representative situations
	The programs in generation 0 will have exceedingly poor fitness
	Garcia's approach was not "GP" by definition. As GP
Detailed description of GP:
	GP-protected functions:
		One can use boolean operators to evolve even more complex computer programs.
		Operations must be closed on all possible values. Division by zero is suggested to return 1 which I don't necessarily agree with. It could also return undefined and all other operations could handle the symbolic value undefined
		sqrt suggested as sqrt(abs)
		rlog suggested as sqrt(log)
		Boolean operators can be redefined so that numerical-valued logic can be used
	Universality of selecting primitive functions and terminals:
		Primitive functions and terminals must include those necessary to solve the problem
        Selection:
          raw fitness can be sum of absolute differences from the target data. Or if you have real valued or integer-valued data, you can use the square root of the sum of the square distances which can increase the influence of more distant points
          standardized fitness restates the raw fitness so that a lower numerical value is a better value. s(i, t) = r(i, t) if r(i, t) has lower better, otherwise s(i, t) = r_max - r(i, t)
          adjusted fitness is computed from the standardized fitness as follows: a(i, t) = 1/(1 + s(i, t)) and lies between 0 and 1. adjusted fitness is bigger for better individuals in the population. koza believes it is generally helpful to use this adjustment. Exaggerates the imporatnce of small differences in the value of the standardized fitness ass the standardized fitness approaches 0 (as often occurs on later generations of a run). Thus, as the population improves, greater emphasis is placed on the small differences that make the difference between a good individual and a very good one. Especially potent if the standardized fitness actually eraches 0 when a perfect solution is found. for tournament selection and rank selectino, adjusted fitness is not relevant and not used.
          normalized fitness. if the method of selection employed is fitness proportionate (is the case for all problems in this book except for the experiments with tournament selection). The concept of normalized fitness is also needed. Normalized fitness n(i, t) = a(i, t) / sum over all k of a(k, t)
          Population size M of 500 is sufficient for solving most of the problems in the book. More complex problems generally require larger population sizes to solve. These more complex problems are usually the problems which entail exedingly time-consuming fitness calculations. For these problems it is possible to improve the number of required generations by greedily over-selecting. Koza only uses over-selection with population sizes 500 or larger. Group 1 has the top 32% and group 2 has the bottom 68%. Group 1 is proportionally selected 80% and group 2 proportionally selected 20%. As the population size doubles, group 1 has the top 32/2^i percent of the population
        Reproduction:
          Individuals copied from one generation to the next. Fitness-proportionate selection for this.
          Rank selection can also be used here. Selectino based on rank of the fitness values of the individuals, with selective pressure
          In tournament selection, a specified number of individuals (often two) are chosen at random from the population and select the most fit of the group
          We don't have to reevaluate fitness of these individuals
        Crossover:
          Just as I read earlier. Incestuous reproduction is allowed as it will almost always produce novel offspring. This will happen a lot as the population approaches some global optimum. Only way to change the population once it converges is through mutatino, although in practice the population often quickly reconverges.
          A maximum permissible size is often specified to prevent crossover from creating arbitrarily huge trees. If a crossover between two parents would create an offspring of impermissible size, the contemplated crossover operation is aborted for that one offspring and the first of its parents is arbitrarily chosen to be reproduced into the new population. The other offspring by crossover may be of permissible size. If both offspring are too large, both parents are reproduced into the new population.
          A default value of 17 for this maximum permissible depth used for all problems in this book permits potentially enormous programs. 2^17 functions and terminals. If four lisp functions and terminals are roughly equivalent to one line of the program written in some conventional programming language, then the largest permissible progrram is about 33,000 lines.
        Optional genetic operations:
          Mutation:
            Mutation operation introduces random changes in structures in the population.
            Mutation is a relatively unimportant secondary operation in the conventional GA that only achieves the reintroduction of certain alleles
            Mutation point can be an internal function point or a terminal node. Koza's mutation operation removes whatever is currently at the selected point and whatever is below the selected point and inserts a randomly generated subtree at that point.
            This parameter typically has the same value as the parameter for the maximum initial size of S-expressions in the initial random population
            A special case of the mutation operation involves inserting a single terminal at a randomly selected point in the tree.
            This point mutation occurs occasionally in the crossover operatino when the two selected crossover points are both terminals
            It is relatively rare for a particular function or terminal ever to disappear entirely from a population in genetic programming assuming a large population size.
          Permutation:
            Some weirdness involving arbitrary selecting functions and permutating their arguments
          Editing:
            Compacts the tree. If any function has no side effects and is not context dependent, the editing operatino will evaluate that function and replace it with a terminal. (+ 1 2) will be 3 and (AND T T) will be replaced by T. Defined by editing rules. (AND X X) -> X, (OR X X) -> X, etc...
            Can be used cosmetically or to improve overall performance during a run
            Editing applied to each individual in the popualtion at a certain time
            Controlled by an integer frequency parameter
          Encapsulation:
            Automatically identifying a potentialy useful subtree and giving it a name so it can be referenced and used later. Takes a subtree and encapsulates it into a new indivisible atom (terminal) in the tree
          Decimation:
            Something about killing the entire popuation.


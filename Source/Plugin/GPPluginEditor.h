/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#ifndef __PLUGINEDITOR_H_4ACCBAA__
#define __PLUGINEDITOR_H_4ACCBAA__

#include "../../JuceLibraryCode/JuceHeader.h"
#include "GPPluginProcessor.h"
#include "GPPluginEditorComponent.h"
#include "GPNetworkDisplayComponent.h"
#include <map>

class GeneticProgrammingSynthesizerComponent;

//==============================================================================
/** This is the editor component that our filter will display.
*/
class GeneticProgrammingSynthesizerAudioProcessorEditor  : public AudioProcessorEditor,
											//public KeyListener,
                                            public SliderListener,
											public ButtonListener,
                                            public Timer
{
public:
    GeneticProgrammingSynthesizerAudioProcessorEditor (GeneticProgrammingSynthesizerAudioProcessor* ownerFilter);
    ~GeneticProgrammingSynthesizerAudioProcessorEditor();

    //==============================================================================
	bool keyPressed (const KeyPress &key);
	bool keyStateChanged (bool isKeyDown);
    void timerCallback();
    void paint (Graphics& g);
    void resized();
    void sliderValueChanged (Slider*);
	void buttonClicked (Button*);

private:
	// JUCE GUI stuff
	GeneticProgrammingSynthesizerComponent mainEditor;
    //MidiKeyboardComponent midiKeyboard;
    ScopedPointer<ResizableCornerComponent> resizer;
    ComponentBoundsConstrainer resizeLimits;

    AudioPlayHead::CurrentPositionInfo lastDisplayedPosition;

    GeneticProgrammingSynthesizerAudioProcessor* getProcessor() const
    {
        return static_cast <GeneticProgrammingSynthesizerAudioProcessor*> (getAudioProcessor());
    }

	// CUSTOM
	GPNetworkDisplayComponent* networkEditor;
	std::map<String, Slider*> sliders;
	std::map<String, Button*> buttons;

    //void displayPositionInfo (const AudioPlayHead::CurrentPositionInfo& pos);
};


#endif  // __PLUGINEDITOR_H_4ACCBAA__

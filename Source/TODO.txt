Main.cpp:
    Add command line for Envelope stuff somehow
    check argument ranges
      renderBlockSize > frames in file?
      fftSize > frames in file?

GPExperiment.cpp:
    Pass time-varying variables to evaluate()
    do TODOs

GPSynth.cpp:
    Fill in more selectFromEvaluated() skeleton code including greedy over
    Maybe implement other types of reproduction
    do TODOs
    maybe remove rawFitness container

Node subclasses:
    DelayNode
    ConditionalNode
    NoiseNode other types of noise
    OscilNode other waveforms/add frequency input

Interactive:
    10 networks, 4 or 5 faders, one keyboard
    Button to interactively suboptimize constants
    Ability to edit network test and add things like PITCHBEND
    Introduce Novelty button
    Buttons to step backwards through evolution
    button to run random evolution for a while
    novelty search of new spectrum elements/spectral peak ratios
    Add max noet length as a slider to GUI in order to make TimeNode potentially useful
    interval variable as primatives? (open 5th, 4th, etc).
    are min/max always constant? do we need to have this be a param for evaluateBlockPerformance? Maybe it could be done during traceNetwork
    variablenode interval for cps stuff is 1-nyquist
	tokenizer does not work correctly on windows? wtf

Ideas:
    use GPHelper to map a range for OscilNode's index of modulation
    crossover at shallower nodes have different probabilities? (exponentially distribute crossover point selection depth)
    finish implementing DifferenceEquationNode. turns out my difference equation idea from the start might have been better somehow. need to find a way to guarantee min/max though
    maybe use naive average and blend with moving average?

Thoughts:
    Don't necessarily have to foray into filters too much. For now focus on best possible FM synthesis recreation
    Maybe can do filterednoise primative at a later point
    Add spline to likely replace ADSR
    LFO nodes too
    Multiple variable nodes to population... replace v0 oscil node with frequency determined by child
    should variablenum in VariableNode be a mutatable param?
    for fitness function, lower the average is on the frequency domain the better. probably want to do exponential moving average with like n/2 lookahead/behind in order to allow it to decrease towards the end to capture tiny partials
    consider constantNode intervalMutliply
        everything except constant has the tightest possible bound on min/max? hard to say
    synth partial continuous between [0, nyquist/centerfreq]?
    consider removing all the node-specific stuff from GPParams
    consider separating min/max into ampmin/ampmax and calcmin/calcmax in order to facilitate ranging constants vs the amplitude they actually apply

TODO long run:
    print ranges/save all networks in text file that can be used from command line to render all generation wavs/just save ID's instead of waves
    implement a structure for fading more params by the convergence of the population. numeric mutation, numeric mutation amounts, mutation, etc.
    figure out how to start without being in initialise method (new thread)
    fleschter munsion? :/
    Check if numerical mutation is working...
        maybe relate numericalMutation to the fitness of the individual. this way particular numbers can be altered more in accordance to deviations from the mean
    fitness function considers noise somehow? as a separate factor alongside spectral/envelope and/or subtract noise from spectral evaluation
    fitness function compares candidate/target envelopes
    amp dB FFT for under/over comparison, not for fitness comparison due to -inf values for some bins... not sure how to deal with this
    try adding frequency child to OscilNode, adding variable0 primative into set and seeing if better matches are made... perhaps OscilNode still uses 0 + child value for detuning
    Get filters (simple) working again. Switch filter libs probably
    prepareToPlay() called at start of every new note (to remove noisenode if(frameNumber == 0))
    more efficiency in subclasses. constantnode could be prerendered and memcpy'd during setRenderInfo, LFO node during updateMutatedParams with malloc in setRenderInfo, etc.
	look at/fix all errors reported by visual studio (use rebuild command)

NEXT EXPERIMENTS:
    SPLINE NODE
    CMAES/test without numerical mutation
    figure out why simple average fitness function seems to work the best
        probably because it does a better job highlighting the peak. try moving average with very large radius to pick up the upper peaks as well. try constant penalty system
        consider changing proportion * bad + base to just bad + base...

    look at AUDACITY rendering code and replicate that in OscilNode?
        might have to use double precision for M_PI ;;
        look for better implementations of FM with variable frequency online

"a lot of decisions for the fitness function were made with human judgement from the output of their changes as any change to the fitness function leaves comparisons between fitness functions useless. so i graded by improvements in the underlying fitness function"

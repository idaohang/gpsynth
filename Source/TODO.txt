Main.cpp:
    Add command line for Envelope stuff somehow
    Add command line for all GPParams
    --help
    check argument ranges
      renderBlockSize > frames in file?
      fftSize > frames in file?

GPExperiment.cpp:
    Pass time-varying variables to evaluate()
    fill and use sampleTimes for efficiency
    do TODOs

GPNetwork.cpp:
    Add new syntax parsing to string parser once node subclasses finalized
    
GPSynth.cpp:
    Fill in selectFromEvaluated() skeleton code including greedy over
    Maybe implement other types of reproduction
    do TODOs
    maybe remove rawFitness container

Node subclasses:
    DelayNode
    ConditionalNode
    consider changing evaluate to return floats as well as all GPFUNCTIONS... (float) double efficiency?

Interactive:
    10 networks, 4 or 5 faders, one keyboard
    Button to interactively suboptimize constants
    Ability to edit network test and add things like PITCHBEND
    Introduce Novelty button
    Buttons to step backwards through evolution
    button to run random evolution for a while
    novelty search of new spectrum elements/spectral peak ratios

Ideas:
    use GPHelper to map a range for OscilNode's index of modulation
    crossover at shallower nodes have different probabilities? (exponentially distribute crossover point selection depth)
    finish implementing DifferenceEquationNode. turns out my difference equation idea from the start might have been better somehow. need to find a way to guarantee min/max though
    maybe add "prepare to play" abstract to GP node to replace if (fn == 0)
    framework to change constants over time that depend on pop convergence

Thoughts:
    reverse way min, max calculation happens by passing desired range down? think about this hard. might be more efficient also maybe its possible to work in ADSR this way
    test new fitness function/improve fitness function: factor noise (weight less)/do something with DC offset

TODO long run:
    calculate min/max stuff with lo/hi filter node if you have resonance, alter bandwidth/quality calculation
    print ranges/save networks in text file/just save ID's in waves
    update README
    check if numericalMutation is working right or not
    implement a structure for fading more params by the convergence of the population. Perhaps switch fitness function to use the wave form magnitudes more once the spectrum has been developed. I seem to not be finding anything that alters spectrum over time
    test setParams and fadeParamChanges stuff.. figure out how to use order in filter instantiation... figure out how to actually fade parameter changes... where did this huge performance hit come from? it came from the set params stuff :/. also 0, n-1 usage for FPC and whatnot
    maybe change fitness function to measure partials relative to maximum instead of absolute magnitude
    change GPRandom to compile on condor

TODO FOR NEXT EXPERIMENT:

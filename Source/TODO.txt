Main.cpp:
    Add command line for Envelope stuff somehow
    Add command line for all GPParams
    --help
    check argument ranges
      renderBlockSize > frames in file?
      fftSize > frames in file?

GPExperiment.cpp:
    Pass time-varying variables to evaluate()
    fill and use sampleTimes for efficiency
    do TODOs

GPNetwork.cpp:
    Add new syntax parsing to string parser once node subclasses finalized
    
GPSynth.cpp:
    Fill in selectFromEvaluated() skeleton code including greedy over
    Maybe implement other types of reproduction
    do TODOs
    maybe remove rawFitness container

Node subclasses:
    DelayNode
    ConditionalNode
    consider changing evaluate to return floats as well as all GPFUNCTIONS... (float) double efficiency?

Interactive:
    10 networks, 4 or 5 faders, one keyboard
    Button to interactively suboptimize constants
    Ability to edit network test and add things like PITCHBEND
    Introduce Novelty button
    Buttons to step backwards through evolution
    button to run random evolution for a while
    novelty search of new spectrum elements/spectral peak ratios
    Add max noet length as a slider to GUI in order to make TimeNode potentially useful
    link visual studio with boost
    interval variable as primatives? (open 5th, 4th, etc).
    are min/max always constant? do we need to have this be a param for evaluateBlockPerformance? Maybe it could be done during traceNetwork
    variablenode interval for cps stuff is 1-nyquist

Ideas:
    use GPHelper to map a range for OscilNode's index of modulation
    crossover at shallower nodes have different probabilities? (exponentially distribute crossover point selection depth)
    finish implementing DifferenceEquationNode. turns out my difference equation idea from the start might have been better somehow. need to find a way to guarantee min/max though
    maybe add "prepare to play" abstract to GP node to replace if (fn == 0)
    framework to change constants over time that depend on pop convergence

Thoughts:

TODO long run:
    calculate min/max stuff with lo/hi filter node if you have resonance, alter bandwidth/quality calculation
    print ranges/save networks in text file/just save ID's in waves
    update README
    implement a structure for fading more params by the convergence of the population. numeric mutation, numeric mutation amounts, mutation, etc.
    figure out how to start without being in initialise method (new thread)
    confirm removed DC offset from fitness function
    fleschter munsion? :/
    Check if numerical mutation is working...
        maybe relate numericalMutation to the fitness of the individual. this way particular numbers can be altered more in accordance to deviations from the mean
    fitness function considers noise somehow? as a separate factor alongside spectral/envelope and/or subtract noise from spectral evaluation

NEXT EXPERIMENTS:
    graph color map for penalty stuff to see if its working/compare to old
    moving average for under/over 
    
    1. Run tests controlling the following variables:
        Fitness function
            Compare spectral content:
                Moving average for under/over
                amp dB FFT for under/over comparison, not for fitness comparison due to -inf values for some bins... not sure how to deal with this
            Compare envelope:
                Single iteration of envelope follower
                Compare every n samples
    3. Get filters/noise working again. Switch filter libs probably
    more sounds!

"a lot of decisions for the fitness function were made with human judgement from the output of their changes as any change to the fitness function leaves comparisons between fitness functions useless. so i graded by improvements in the underlying fitness function"
